{
	"info": {
		"_postman_id": "9ad5969a-c98e-449e-b5c9-dc32789188e3",
		"name": "Book",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33953173"
	},
	"item": [
		{
			"name": "AuthorTitle",
			"item": [
				{
					"name": "GetAuthorBookSuccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Body has entries field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"entries\");\r",
									"})\r",
									"\r",
									"pm.test(\"Correct book should have this isbn\", () => {\r",
									"    pm.expect(response.entries[0].isbn13).to.eql(\"9780439554930\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/authortitle?author=J.K. Rowling&title=Harry Potter and the Sorcerer's Stone",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"authortitle"
							],
							"query": [
								{
									"key": "author",
									"value": "J.K. Rowling"
								},
								{
									"key": "title",
									"value": "Harry Potter and the Sorcerer's Stone"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAuthorBookAuthorErr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Author does not exist\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Author does not exist in database.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/authortitle/?author=EMPTY&title=Animal Farm",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"authortitle",
								""
							],
							"query": [
								{
									"key": "author",
									"value": "EMPTY"
								},
								{
									"key": "title",
									"value": "Animal Farm"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAuthorBookTitleErr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Book does not exist\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Book title does not exist in database.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/authortitle/?author=J.K. Rowling&title=NONE",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"authortitle",
								""
							],
							"query": [
								{
									"key": "author",
									"value": "J.K. Rowling"
								},
								{
									"key": "title",
									"value": "NONE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAuthorBookMismatchErr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Book and Author do not match\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Book not written by specified author.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/authortitle/?author=J.K. Rowling&title=Animal Farm",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"authortitle",
								""
							],
							"query": [
								{
									"key": "author",
									"value": "J.K. Rowling"
								},
								{
									"key": "title",
									"value": "Animal Farm"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAuthorBookMissingInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Missing information\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Missing data, refer to documentation.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/authortitle/?author=J.K. Rowling&title=",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"authortitle",
								""
							],
							"query": [
								{
									"key": "author",
									"value": "J.K. Rowling"
								},
								{
									"key": "title",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetRatingAvg",
			"item": [
				{
					"name": "GetRatingSuccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Body has entries field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"entries\");\r",
									"})\r",
									"\r",
									"pm.test(\"Correct book should have this isbn\", () => {\r",
									"    pm.expect(response.entries[0].isbn13).to.eql(\"9780316954990\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/ratings/?min=4.8&max=5.0",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"ratings",
								""
							],
							"query": [
								{
									"key": "min",
									"value": "4.8"
								},
								{
									"key": "max",
									"value": "5.0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetRatingOutOfRange",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Out of range\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Ratings should be between 0.0 and 5.0\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/ratings/?min=-0.1&max=3.5",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"ratings",
								""
							],
							"query": [
								{
									"key": "min",
									"value": "-0.1"
								},
								{
									"key": "max",
									"value": "3.5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetRatingBadRange",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Min greater than max\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Minimum rating should be less than maximum rating.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/ratings/?min=2.5&max=2.0",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"ratings",
								""
							],
							"query": [
								{
									"key": "min",
									"value": "2.5"
								},
								{
									"key": "max",
									"value": "2.0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetRatingMissingInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Missing/Bad information\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Missing or bad information, see documentation.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/ratings/?min=2.5&max=",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"ratings",
								""
							],
							"query": [
								{
									"key": "min",
									"value": "2.5"
								},
								{
									"key": "max",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetRatingNoneFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"No books in range\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No books found in this rating range.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/ratings/?min=4.9&max=5.0",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"ratings",
								""
							],
							"query": [
								{
									"key": "min",
									"value": "4.9"
								},
								{
									"key": "max",
									"value": "5.0"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAllBooks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Response status should be 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Body has entries field\", () => {\r",
							"    pm.expect(response).to.haveOwnProperty(\"entries\");\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{book_url}}/getAll",
					"host": [
						"{{book_url}}"
					],
					"path": [
						"getAll"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "book_url",
			"value": "{{base_url}}/book",
			"type": "string"
		}
	]
}