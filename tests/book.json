{
	"info": {
		"_postman_id": "d597d6b4-1d3f-40c4-be90-ba9bfffbf818",
		"name": "Book",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33953173"
	},
	"item": [
		{
			"name": "GetBooksAuthorTitle",
			"item": [
				{
					"name": "GetAuthorBookSuccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Body has entries field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"entries\");\r",
									"})\r",
									"\r",
									"pm.test(\"Correct book should have this isbn\", () => {\r",
									"    pm.expect(response.entries[0].isbn13).to.eql(\"9780439554930\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/authortitle?author=J.K. Rowling&title=Harry Potter and the Sorcerer's Stone",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"authortitle"
							],
							"query": [
								{
									"key": "author",
									"value": "J.K. Rowling"
								},
								{
									"key": "title",
									"value": "Harry Potter and the Sorcerer's Stone"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAuthorBookAuthorErr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Author does not exist\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Author does not exist in database.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/authortitle/?author=EMPTY&title=Animal Farm",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"authortitle",
								""
							],
							"query": [
								{
									"key": "author",
									"value": "EMPTY"
								},
								{
									"key": "title",
									"value": "Animal Farm"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAuthorBookTitleErr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Book does not exist\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Book title does not exist in database.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/authortitle/?author=J.K. Rowling&title=NONE",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"authortitle",
								""
							],
							"query": [
								{
									"key": "author",
									"value": "J.K. Rowling"
								},
								{
									"key": "title",
									"value": "NONE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAuthorBookMismatchErr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Book and Author do not match\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Book not written by specified author.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/authortitle/?author=J.K. Rowling&title=Animal Farm",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"authortitle",
								""
							],
							"query": [
								{
									"key": "author",
									"value": "J.K. Rowling"
								},
								{
									"key": "title",
									"value": "Animal Farm"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAuthorBookMissingInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Missing information\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Missing data, refer to documentation.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/authortitle/?author=J.K. Rowling&title=",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"authortitle",
								""
							],
							"query": [
								{
									"key": "author",
									"value": "J.K. Rowling"
								},
								{
									"key": "title",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAvgRatingRange",
			"item": [
				{
					"name": "GetRatingSuccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Body has entries field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"entries\");\r",
									"})\r",
									"\r",
									"pm.test(\"Correct book should have this isbn\", () => {\r",
									"    pm.expect(response.entries[0].isbn13).to.eql(\"9780316954990\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/ratings/?min=4.8&max=5.0",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"ratings",
								""
							],
							"query": [
								{
									"key": "min",
									"value": "4.8"
								},
								{
									"key": "max",
									"value": "5.0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetRatingOutOfRange",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Out of range\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Ratings should be between 0.0 and 5.0\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/ratings/?min=-0.1&max=3.5",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"ratings",
								""
							],
							"query": [
								{
									"key": "min",
									"value": "-0.1"
								},
								{
									"key": "max",
									"value": "3.5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetRatingBadRange",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Min greater than max\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Minimum rating should be less than maximum rating.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/ratings/?min=2.5&max=2.0",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"ratings",
								""
							],
							"query": [
								{
									"key": "min",
									"value": "2.5"
								},
								{
									"key": "max",
									"value": "2.0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetRatingMissingInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Missing/Bad information\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Missing or bad information, see documentation.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/ratings/?min=2.5&max=",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"ratings",
								""
							],
							"query": [
								{
									"key": "min",
									"value": "2.5"
								},
								{
									"key": "max",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetRatingNoneFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"No books in range\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No books found in this rating range.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/ratings/?min=4.9&max=5.0",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"ratings",
								""
							],
							"query": [
								{
									"key": "min",
									"value": "4.9"
								},
								{
									"key": "max",
									"value": "5.0"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetBooksByAuthor",
			"item": [
				{
					"name": "GetBookByAuthorSuccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 200\", () =>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Body has entries field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"entries\")\r",
									"})\r",
									"\r",
									"pm.test(\"Correct book should have this isbn\", () => {\r",
									"    pm.expect(response.entries[0].isbn13).to.eql(\"9780061122420\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/author?author=Paulo Coelho",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"author"
							],
							"query": [
								{
									"key": "author",
									"value": "Paulo Coelho"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookByAuthorError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"No books found\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No books with this author were found in the database.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/author?author=Stu Dent",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"author"
							],
							"query": [
								{
									"key": "author",
									"value": "Stu Dent"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBookByAuthorEmpty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Missing information\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Missing data, refer to documentation.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/author?author=",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"author"
							],
							"query": [
								{
									"key": "author",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetBooksByRating",
			"item": [
				{
					"name": "GetBooksByRatingSuccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Body has entries field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"entries\");\r",
									"})\r",
									"\r",
									"pm.test(\"Correct book should have this isbn\", () => {\r",
									"    pm.expect(response.entries[0].isbn13).to.eql(\"9780679783270\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/singlerating?rating=4.24",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"singlerating"
							],
							"query": [
								{
									"key": "rating",
									"value": "4.24"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBooksByRatingErrorBook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"No books found\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No books with this rating were found.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/singlerating?rating=2",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"singlerating"
							],
							"query": [
								{
									"key": "rating",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBooksByRatingErrorRatingMin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Rating out of range\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Rating should be between 0.0 and 5.0.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/singlerating?rating=-1",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"singlerating"
							],
							"query": [
								{
									"key": "rating",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBooksByRatingErrorRatingMax",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Rating out of range\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Rating should be between 0.0 and 5.0.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/singlerating?rating=12",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"singlerating"
							],
							"query": [
								{
									"key": "rating",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBooksByRatingErrorInput",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Missing/Bad information\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Missing or bad information, see documentation.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/singlerating?rating=carlos",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"singlerating"
							],
							"query": [
								{
									"key": "rating",
									"value": "carlos"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAllBooks",
			"item": [
				{
					"name": "GetAllBooksSuccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Body has entries field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"entries\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/getAll?pagenum=20&perpage=4",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"getAll"
							],
							"query": [
								{
									"key": "pagenum",
									"value": "20"
								},
								{
									"key": "perpage",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllBooksMissingInput",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Missing/Bad information\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Missing or bad information, see documentation.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/getAll?pagenum=20",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"getAll"
							],
							"query": [
								{
									"key": "pagenum",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllBadInput",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Missing/Bad information\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Missing or bad information, see documentation.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/getAll?pagenum=20&perpage=Stu Dent",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"getAll"
							],
							"query": [
								{
									"key": "pagenum",
									"value": "20"
								},
								{
									"key": "perpage",
									"value": "Stu Dent"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllBadRange",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Page outside of range\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Page must be greater than 0 and less than 48.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/getAll?pagenum=98&perpage=200",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"getAll"
							],
							"query": [
								{
									"key": "pagenum",
									"value": "98"
								},
								{
									"key": "perpage",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllNegativePageNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Input outside of range\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Both values per page and page number must be greater than 0.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/getAll?pagenum=-48&perpage=20",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"getAll"
							],
							"query": [
								{
									"key": "pagenum",
									"value": "-48"
								},
								{
									"key": "perpage",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllNegativeNumberPerPage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Input outside of range\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Both values per page and page number must be greater than 0.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/getAll?pagenum=1&perpage=-20",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"getAll"
							],
							"query": [
								{
									"key": "pagenum",
									"value": "1"
								},
								{
									"key": "perpage",
									"value": "-20"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetBooksTitle",
			"item": [
				{
					"name": "GetBooksByTitleSuccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Body has entries field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"entries\");\r",
									"})\r",
									"\r",
									"pm.test(\"Correct book should have this isbn\", () => {\r",
									"    pm.expect(response.entries[0].isbn13).to.eql(\"9780618346260\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/title/?title=The Fellowship of the Ring",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"title",
								""
							],
							"query": [
								{
									"key": "title",
									"value": "The Fellowship of the Ring"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBooksByTitleMissingInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Missing information\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Missing data, refer to documentation.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/title/?title=",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"title",
								""
							],
							"query": [
								{
									"key": "title",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBooksByTitleNoneFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Book title does not exist\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Book title not found in database.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/title?title=bookthatshouldnotexistindatabase",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"title"
							],
							"query": [
								{
									"key": "title",
									"value": "bookthatshouldnotexistindatabase"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetBooksYear",
			"item": [
				{
					"name": "GetBooksByYearSuccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Body has entries field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"entries\");\r",
									"})\r",
									"\r",
									"pm.test(\"Correct book should have this isbn\", () => {\r",
									"    //find a test thatll give me just one for an easy test\r",
									"    pm.expect(response.entries[0].isbn13).to.eql(\"9780618346260\");\r",
									"})\r",
									"\r",
									"pm.test(\"Correct book should have this isbn\", () => {\r",
									"    //find a test thatll give me just one for an easy test\r",
									"    pm.expect(response.entries[1].isbn13).to.eql(\"9780140283330\");\r",
									"})\r",
									"\r",
									"pm.test(\"Correct book should have this isbn\", () => {\r",
									"    //find a test thatll give me just one for an easy test\r",
									"    pm.expect(response.entries[2].isbn13).to.eql(\"9780394800160\");\r",
									"})\r",
									"\r",
									"pm.test(\"Correct book should have this isbn\", () => {\r",
									"    //find a test thatll give me just one for an easy test\r",
									"    pm.expect(response.entries[3].isbn13).to.eql(\"9781594200820\");\r",
									"})\r",
									"\r",
									"pm.test(\"Correct book should have this isbn\", () => {\r",
									"    //find a test thatll give me just one for an easy test\r",
									"    pm.expect(response.entries[4].isbn13).to.eql(\"9781444778520\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/year?year=1954",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"year"
							],
							"query": [
								{
									"key": "year",
									"value": "1954"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBooksByYearNoneFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"No books in this year\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"No books found in this year.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/year?year=42",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"year"
							],
							"query": [
								{
									"key": "year",
									"value": "42"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBooksByYearMissingInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Missing/Bad information\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Missing or bad information, see documentation.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/year?year=",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"year"
							],
							"query": [
								{
									"key": "year",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBooksByYearFutureYear",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 404\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Year is in the future\");\r",
									"})\r",
									"\r",
									"pm.test(\"Body has message field\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Error message should be in this format\", () => {\r",
									"    pm.expect(response.message).to.eql(\"Cannot input a future year.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/year?year=6000",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"year"
							],
							"query": [
								{
									"key": "year",
									"value": "6000"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetBooksISBN",
			"item": [
				{
					"name": "GetISBNSuccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response should have a field 'entries'\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"entries\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{book_url}}/isbn/?isbn=9780743273560",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"isbn",
								""
							],
							"query": [
								{
									"key": "isbn",
									"value": "9780743273560"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetISBNNoBooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"}) \r",
									"\r",
									"pm.test(\"Response has correct status message\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"    pm.expect(response.message).to.equal(\"No books found with this ISBN.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/isbn/?isbn=9780743273260",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"isbn",
								""
							],
							"query": [
								{
									"key": "isbn",
									"value": "9780743273260"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetISBNMissingInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"}) \r",
									"\r",
									"pm.test(\"Response has correct status message\", () => {\r",
									"    pm.expect(response).to.haveOwnProperty(\"message\");\r",
									"    pm.expect(response.message).to.equal(\"Missing or bad information, see documentation.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{book_url}}/isbn/?isbn=978074327356",
							"host": [
								"{{book_url}}"
							],
							"path": [
								"isbn",
								""
							],
							"query": [
								{
									"key": "isbn",
									"value": "978074327356"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "book_url",
			"value": "localhost:4000/book",
			"type": "string"
		}
	]
}